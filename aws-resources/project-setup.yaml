AWSTemplateFormatVersion: "2010-09-09"
Description: Application setup via AWS Cloud Formation
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: invoiceApp

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubCIDR1:
    Description: Please enter the IP range (CIDR notation) for this public subnet
    Type: String
    Default: 10.0.1.0/24

  PublicSubCIDR2:
    Description: Please enter the IP range (CIDR notation) for this public subnet
    Type: String
    Default: 10.0.2.0/24

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro

  InstanceIAMRole:
    Description: IAM Role name
    Type: String
    Default: invoice-app-ec2-role

  InstanceSshKey:
    Description: SSH Key name
    Type: String
    Default: invoice-app-key-01

  InstanceImageId:
    Description: Image ID
    Type: String
    Default: ami-0a6dc7529cd559185

  InvoiceAppServerLaunchTemplateVersionNumber:
    Description: Launch template version
    Type: String
    Default: 1

Resources:
  # IAM role for ec2
  AppinvoiceAppEc2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref InstanceIAMRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  AppinvoiceAppEc2RoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: AppinvoiceAppEc2Role

  # VPC and network-related stuff
  AppVpc:
    Type: AWS::EC2::VPC
    DependsOn: AppinvoiceAppEc2Role
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  AppVpcRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AppVpc
    Properties:
      VpcId:
        Ref: AppVpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: AppVpc
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  AttachGatewayToVpc:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: AppInternetGateway
    Properties:
      VpcId:
        Ref: AppVpc
      InternetGatewayId:
        Ref: AppInternetGateway

  AppInternetRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - AppVpc
      - AttachGatewayToVpc
      - AppInternetGateway
      - AppVpcRouteTable
    Properties:
      RouteTableId:
        Ref: AppVpcRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: AppInternetGateway

  AppPubSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AppVpc
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: AppVpc
      CidrBlock: !Ref PublicSubCIDR1
      AvailabilityZone: "eu-central-1a"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public subnet 1

  AppPubSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AppVpc
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: AppVpc
      CidrBlock: !Ref PublicSubCIDR2
      AvailabilityZone: "eu-central-1b"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public subnet 2

  AppPubSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - AppVpc
      - AppPubSubnet1
      - AppVpcRouteTable
    Properties:
      SubnetId:
        Ref: AppPubSubnet1
      RouteTableId:
        Ref: AppVpcRouteTable

  AppPubSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - AppVpc
      - AppPubSubnet2
      - AppVpcRouteTable
    Properties:
      SubnetId:
        Ref: AppPubSubnet2
      RouteTableId:
        Ref: AppVpcRouteTable

 # Security
  AppInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: AppVpc
    Properties:
      GroupName: App Securrity Group
      GroupDescription: Allow HTTP and SSH
      VpcId:
        Ref: AppVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: All
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public subnet security group

  # EC2
#  InvoiceAppServer:
#    Type: "AWS::EC2::Instance"
#    DependsOn:
#      - AppPubSubnetRouteTableAssociation
#      - AppInstanceSecurityGroup
#    Properties:
#      ImageId: !Ref InstanceImageId
#      KeyName: !Ref InstanceSshKey
#      InstanceType:
#        Ref: InstanceType
#      SecurityGroupIds:
#        - Ref: AppInstanceSecurityGroup
#      SubnetId: !Ref AppPubSubnet
#      IamInstanceProfile: !Ref InstanceAmiRole
#      UserData:
#        Fn::Base64:
#          !Sub |
#          #!/bin/bash -xe
#          sudo yum update -y
#          sudo amazon-linux-extras install docker -y
#          sudo service docker start
#          sudo usermod -a -G docker ec2-user
#          sudo docker run -d -p 80:8080 pzalejko/ddd-invoice-web
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName} main app

  InvoiceAppServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Name: InvoiceAppServerTargetGroup
      TargetType: instance
      Protocol: HTTP
      Port: 80
      VpcId:
        Ref: AppVpc

  InvoiceAppServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - AppinvoiceAppEc2Role
      - AppPubSubnetRouteTableAssociation1
      - AppPubSubnetRouteTableAssociation2
      - AppInstanceSecurityGroup
    Properties:
      LaunchTemplateName: InvoiceAppLaunchTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref AppinvoiceAppEc2RoleProfile
        ImageId: !Ref InstanceImageId
        InstanceType: !Ref InstanceType
        KeyName: !Ref InstanceSshKey
        SecurityGroupIds:
          - Ref: AppInstanceSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash -xe
            sudo yum update -y
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            sudo docker run -d -p 80:8080 pzalejko/ddd-invoice-web

  InvoiceAppServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '0'
      MaxSize: '1'
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref InvoiceAppServerLaunchTemplate
        Version: !Ref InvoiceAppServerLaunchTemplateVersionNumber
      VPCZoneIdentifier:
        - !Ref AppPubSubnet1
        - !Ref AppPubSubnet2
      TargetGroupARNs:
        - !Ref InvoiceAppServerTargetGroup

  InvoiceAppServerLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets:
        - !Ref AppPubSubnet1
        - !Ref AppPubSubnet2
      SecurityGroups:
        - !Ref AppInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InvoiceAppServerLbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref InvoiceAppServerLB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref InvoiceAppServerTargetGroup
