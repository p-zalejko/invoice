/*
 * This file is generated by jOOQ.
 */
package com.gmail.pzalejko.invoice.manager.db.tables;


import com.gmail.pzalejko.invoice.manager.db.Keys;
import com.gmail.pzalejko.invoice.manager.db.Public;
import com.gmail.pzalejko.invoice.manager.db.enums.ItemUnit;
import com.gmail.pzalejko.invoice.manager.db.tables.records.InvoiceitemRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Invoiceitem extends TableImpl<InvoiceitemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.invoiceitem</code>
     */
    public static final Invoiceitem INVOICEITEM = new Invoiceitem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoiceitemRecord> getRecordType() {
        return InvoiceitemRecord.class;
    }

    /**
     * The column <code>public.invoiceitem.id</code>.
     */
    public final TableField<InvoiceitemRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.invoiceitem.item_id</code>.
     */
    public final TableField<InvoiceitemRecord, Integer> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.invoiceitem.invoice_id</code>.
     */
    public final TableField<InvoiceitemRecord, Integer> INVOICE_ID = createField(DSL.name("invoice_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.invoiceitem.name</code>.
     */
    public final TableField<InvoiceitemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    /**
     * The column <code>public.invoiceitem.unit</code>.
     */
    public final TableField<InvoiceitemRecord, ItemUnit> UNIT = createField(DSL.name("unit"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.gmail.pzalejko.invoice.manager.db.enums.ItemUnit.class), this, "");

    /**
     * The column <code>public.invoiceitem.quantity</code>.
     */
    public final TableField<InvoiceitemRecord, Integer> QUANTITY = createField(DSL.name("quantity"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.invoiceitem.price_value</code>.
     */
    public final TableField<InvoiceitemRecord, BigDecimal> PRICE_VALUE = createField(DSL.name("price_value"), SQLDataType.NUMERIC(6, 2), this, "");

    /**
     * The column <code>public.invoiceitem.price_vat</code>.
     */
    public final TableField<InvoiceitemRecord, Integer> PRICE_VAT = createField(DSL.name("price_vat"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.invoiceitem.price_currency</code>.
     */
    public final TableField<InvoiceitemRecord, String> PRICE_CURRENCY = createField(DSL.name("price_currency"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    private Invoiceitem(Name alias, Table<InvoiceitemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Invoiceitem(Name alias, Table<InvoiceitemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.invoiceitem</code> table reference
     */
    public Invoiceitem(String alias) {
        this(DSL.name(alias), INVOICEITEM);
    }

    /**
     * Create an aliased <code>public.invoiceitem</code> table reference
     */
    public Invoiceitem(Name alias) {
        this(alias, INVOICEITEM);
    }

    /**
     * Create a <code>public.invoiceitem</code> table reference
     */
    public Invoiceitem() {
        this(DSL.name("invoiceitem"), null);
    }

    public <O extends Record> Invoiceitem(Table<O> child, ForeignKey<O, InvoiceitemRecord> key) {
        super(child, key, INVOICEITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<InvoiceitemRecord, Integer> getIdentity() {
        return (Identity<InvoiceitemRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InvoiceitemRecord> getPrimaryKey() {
        return Keys.INVOICEITEM_PKEY;
    }

    @Override
    public List<ForeignKey<InvoiceitemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INVOICEITEM__INVOICEITEM_ITEM_ID_FKEY, Keys.INVOICEITEM__INVOICEITEM_INVOICE_ID_FKEY);
    }

    private transient Item _item;
    private transient Invoice _invoice;

    /**
     * Get the implicit join path to the <code>public.item</code> table.
     */
    public Item item() {
        if (_item == null)
            _item = new Item(this, Keys.INVOICEITEM__INVOICEITEM_ITEM_ID_FKEY);

        return _item;
    }

    /**
     * Get the implicit join path to the <code>public.invoice</code> table.
     */
    public Invoice invoice() {
        if (_invoice == null)
            _invoice = new Invoice(this, Keys.INVOICEITEM__INVOICEITEM_INVOICE_ID_FKEY);

        return _invoice;
    }

    @Override
    public Invoiceitem as(String alias) {
        return new Invoiceitem(DSL.name(alias), this);
    }

    @Override
    public Invoiceitem as(Name alias) {
        return new Invoiceitem(alias, this);
    }

    @Override
    public Invoiceitem as(Table<?> alias) {
        return new Invoiceitem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoiceitem rename(String name) {
        return new Invoiceitem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoiceitem rename(Name name) {
        return new Invoiceitem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Invoiceitem rename(Table<?> name) {
        return new Invoiceitem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, String, ItemUnit, Integer, BigDecimal, Integer, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super Integer, ? super Integer, ? super String, ? super ItemUnit, ? super Integer, ? super BigDecimal, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super Integer, ? super Integer, ? super String, ? super ItemUnit, ? super Integer, ? super BigDecimal, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
